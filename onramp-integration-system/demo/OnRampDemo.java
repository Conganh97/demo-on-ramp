package com.onramp.integration.demo;

import com.onramp.integration.core.OnRampService;
import com.onramp.integration.factories.OnRampServiceFactory;
import com.onramp.integration.models.*;
import com.onramp.integration.exceptions.OnRampException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.ComponentScan;

import java.util.List;
import java.util.Scanner;
import java.util.concurrent.CompletableFuture;

/**
 * ·ª®ng d·ª•ng demo ƒë·ªÉ minh h·ªça c√°ch s·ª≠ d·ª•ng OnRamp Integration System.
 * 
 * ·ª®ng d·ª•ng n√†y cho ph√©p user:
 * 1. Xem danh s√°ch providers ƒë∆∞·ª£c h·ªó tr·ª£
 * 2. L·∫•y b√°o gi√° t·ª´ provider
 * 3. T·∫°o ƒë∆°n h√†ng mua ti·ªÅn ƒëi·ªán t·ª≠
 * 4. Ki·ªÉm tra tr·∫°ng th√°i ƒë∆°n h√†ng
 * 5. Xem l·ªãch s·ª≠ giao d·ªãch
 */
@SpringBootApplication
@ComponentScan(basePackages = "com.onramp.integration")
public class OnRampDemo implements CommandLineRunner {

    @Autowired
    private OnRampServiceFactory serviceFactory;

    private Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        SpringApplication.run(OnRampDemo.class, args);
    }

    @Override
    public void run(String... args) throws Exception {
        System.out.println("=".repeat(60));
        System.out.println("üöÄ OnRamp Integration System Demo");
        System.out.println("=".repeat(60));
        System.out.println();

        try {
            showMainMenu();
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói trong demo: " + e.getMessage());
            e.printStackTrace();
        } finally {
            scanner.close();
        }
    }

    private void showMainMenu() {
        while (true) {
            System.out.println("\nüìã MENU CH√çNH");
            System.out.println("1. Xem danh s√°ch providers");
            System.out.println("2. L·∫•y b√°o gi√°");
            System.out.println("3. T·∫°o ƒë∆°n h√†ng");
            System.out.println("4. Ki·ªÉm tra tr·∫°ng th√°i ƒë∆°n h√†ng");
            System.out.println("5. Xem t√†i s·∫£n ƒë∆∞·ª£c h·ªó tr·ª£");
            System.out.println("6. Xem ph∆∞∆°ng th·ª©c thanh to√°n");
            System.out.println("7. Test k·∫øt n·ªëi provider");
            System.out.println("0. Tho√°t");
            System.out.print("\nCh·ªçn t√πy ch·ªçn (0-7): ");

            try {
                int choice = Integer.parseInt(scanner.nextLine().trim());
                
                switch (choice) {
                    case 1:
                        showSupportedProviders();
                        break;
                    case 2:
                        getQuoteDemo();
                        break;
                    case 3:
                        createOrderDemo();
                        break;
                    case 4:
                        checkOrderStatusDemo();
                        break;
                    case 5:
                        showSupportedAssetsDemo();
                        break;
                    case 6:
                        showPaymentMethodsDemo();
                        break;
                    case 7:
                        testProviderConnectionDemo();
                        break;
                    case 0:
                        System.out.println("\nüëã C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng OnRamp Integration System Demo!");
                        return;
                    default:
                        System.out.println("‚ùå T√πy ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn t·ª´ 0-7.");
                }
            } catch (NumberFormatException e) {
                System.out.println("‚ùå Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá.");
            } catch (Exception e) {
                System.err.println("‚ùå L·ªói: " + e.getMessage());
            }
        }
    }

    private void showSupportedProviders() {
        System.out.println("\nüè¢ DANH S√ÅCH PROVIDERS ƒê∆Ø·ª¢C H·ªñ TR·ª¢");
        System.out.println("-".repeat(40));

        String[] providers = serviceFactory.getSupportedProviders();
        
        if (providers.length == 0) {
            System.out.println("‚ùå Kh√¥ng c√≥ provider n√†o ƒë∆∞·ª£c h·ªó tr·ª£.");
            return;
        }

        for (int i = 0; i < providers.length; i++) {
            String provider = providers[i];
            boolean isSupported = serviceFactory.isProviderSupported(provider);
            String status = isSupported ? "‚úÖ ƒê∆∞·ª£c h·ªó tr·ª£" : "‚ùå Kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£";
            
            System.out.printf("%d. %s - %s%n", i + 1, provider.toUpperCase(), status);
        }
    }

    private void getQuoteDemo() {
        System.out.println("\nüí∞ L·∫§Y B√ÅO GI√Å");
        System.out.println("-".repeat(30));

        try {
            // Ch·ªçn provider
            String provider = selectProvider();
            if (provider == null) return;

            // Nh·∫≠p th√¥ng tin b√°o gi√°
            System.out.print("Nh·∫≠p m√£ ti·ªÅn ph√°p ƒë·ªãnh (VD: USD): ");
            String fiatCurrency = scanner.nextLine().trim().toUpperCase();

            System.out.print("Nh·∫≠p m√£ ti·ªÅn ƒëi·ªán t·ª≠ (VD: BTC): ");
            String cryptoCurrency = scanner.nextLine().trim().toUpperCase();

            System.out.print("Nh·∫≠p s·ªë ti·ªÅn ph√°p ƒë·ªãnh (VD: 100): ");
            String amountStr = scanner.nextLine().trim();
            Double fiatAmount = Double.parseDouble(amountStr);

            // T·∫°o service v√† l·∫•y b√°o gi√°
            OnRampService service = serviceFactory.createServiceWithDefaultConfig(provider);
            
            System.out.println("\n‚è≥ ƒêang l·∫•y b√°o gi√°...");
            
            CompletableFuture<Quote> quoteFuture = service.getQuote(fiatCurrency, cryptoCurrency, fiatAmount, null);
            Quote quote = quoteFuture.get();

            // Hi·ªÉn th·ªã k·∫øt qu·∫£
            System.out.println("\n‚úÖ B√ÅO GI√Å TH√ÄNH C√îNG");
            System.out.println("-".repeat(30));
            System.out.printf("Provider: %s%n", quote.getProviderName());
            System.out.printf("Ti·ªÅn ph√°p ƒë·ªãnh: %s %.2f%n", quote.getFiatCurrency(), quote.getFiatAmount());
            System.out.printf("Ti·ªÅn ƒëi·ªán t·ª≠: %s %.8f%n", quote.getCryptoCurrency(), quote.getCryptoAmount());
            System.out.printf("T·ª∑ gi√°: %.2f %s/%s%n", quote.getExchangeRate(), quote.getFiatCurrency(), quote.getCryptoCurrency());
            System.out.printf("Ph√≠: %.2f %s%n", quote.getFee(), quote.getFiatCurrency());
            System.out.printf("T·ªïng c·ªông: %.2f %s%n", quote.getTotalFiatAmount(), quote.getFiatCurrency());
            
            if (quote.getExpiresAt() != null) {
                System.out.printf("H·∫øt h·∫°n: %s%n", quote.getExpiresAt());
            }

        } catch (Exception e) {
            System.err.println("‚ùå L·ªói khi l·∫•y b√°o gi√°: " + e.getMessage());
        }
    }

    private void createOrderDemo() {
        System.out.println("\nüõí T·∫†O ƒê∆†N H√ÄNG");
        System.out.println("-".repeat(30));

        try {
            // Ch·ªçn provider
            String provider = selectProvider();
            if (provider == null) return;

            // Nh·∫≠p th√¥ng tin ƒë∆°n h√†ng
            System.out.print("Nh·∫≠p m√£ ti·ªÅn ph√°p ƒë·ªãnh (VD: USD): ");
            String fiatCurrency = scanner.nextLine().trim().toUpperCase();

            System.out.print("Nh·∫≠p m√£ ti·ªÅn ƒëi·ªán t·ª≠ (VD: BTC): ");
            String cryptoCurrency = scanner.nextLine().trim().toUpperCase();

            System.out.print("Nh·∫≠p s·ªë ti·ªÅn ph√°p ƒë·ªãnh (VD: 100): ");
            String amountStr = scanner.nextLine().trim();
            Double fiatAmount = Double.parseDouble(amountStr);

            System.out.print("Nh·∫≠p ƒë·ªãa ch·ªâ v√≠ (VD: 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa): ");
            String walletAddress = scanner.nextLine().trim();

            System.out.print("Nh·∫≠p URL callback (VD: https://yoursite.com/callback): ");
            String redirectUrl = scanner.nextLine().trim();

            // T·∫°o service v√† ƒë∆°n h√†ng
            OnRampService service = serviceFactory.createServiceWithDefaultConfig(provider);
            
            System.out.println("\n‚è≥ ƒêang t·∫°o ƒë∆°n h√†ng...");
            
            CompletableFuture<Order> orderFuture = service.createOrder(
                fiatCurrency, cryptoCurrency, 
                fiatAmount, null,
                walletAddress, redirectUrl
            );
            Order order = orderFuture.get();

            // Hi·ªÉn th·ªã k·∫øt qu·∫£
            System.out.println("\n‚úÖ T·∫†O ƒê∆†N H√ÄNG TH√ÄNH C√îNG");
            System.out.println("-".repeat(40));
            System.out.printf("Order ID: %s%n", order.getOrderId());
            System.out.printf("External Order ID: %s%n", order.getExternalOrderId());
            System.out.printf("Provider: %s%n", order.getProviderName());
            System.out.printf("Tr·∫°ng th√°i: %s%n", order.getStatus());
            System.out.printf("Ti·ªÅn ph√°p ƒë·ªãnh: %s %.2f%n", order.getFiatCurrency(), order.getFiatAmount());
            System.out.printf("Ti·ªÅn ƒëi·ªán t·ª≠: %s %.8f%n", order.getCryptoCurrency(), order.getCryptoAmount());
            System.out.printf("ƒê·ªãa ch·ªâ v√≠: %s%n", order.getWalletAddress());
            System.out.printf("Th·ªùi gian t·∫°o: %s%n", order.getCreatedAt());

            System.out.println("\nüí° L∆∞u Order ID ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i sau: " + order.getOrderId());

        } catch (Exception e) {
            System.err.println("‚ùå L·ªói khi t·∫°o ƒë∆°n h√†ng: " + e.getMessage());
        }
    }

    private void checkOrderStatusDemo() {
        System.out.println("\nüîç KI·ªÇM TRA TR·∫†NG TH√ÅI ƒê∆†N H√ÄNG");
        System.out.println("-".repeat(40));

        try {
            // Ch·ªçn provider
            String provider = selectProvider();
            if (provider == null) return;

            System.out.print("Nh·∫≠p Order ID: ");
            String orderId = scanner.nextLine().trim();

            if (orderId.isEmpty()) {
                System.out.println("‚ùå Order ID kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.");
                return;
            }

            // T·∫°o service v√† ki·ªÉm tra tr·∫°ng th√°i
            OnRampService service = serviceFactory.createServiceWithDefaultConfig(provider);
            
            System.out.println("\n‚è≥ ƒêang ki·ªÉm tra tr·∫°ng th√°i...");
            
            CompletableFuture<Order> orderFuture = service.getOrderStatus(orderId);
            Order order = orderFuture.get();

            // Hi·ªÉn th·ªã k·∫øt qu·∫£
            System.out.println("\n‚úÖ TR·∫†NG TH√ÅI ƒê∆†N H√ÄNG");
            System.out.println("-".repeat(30));
            System.out.printf("Order ID: %s%n", order.getOrderId());
            System.out.printf("Tr·∫°ng th√°i: %s%n", order.getStatus());
            System.out.printf("Provider: %s%n", order.getProviderName());
            System.out.printf("C·∫≠p nh·∫≠t l·∫ßn cu·ªëi: %s%n", order.getUpdatedAt());

            // Hi·ªÉn th·ªã th√¥ng tin b·ªï sung d·ª±a tr√™n tr·∫°ng th√°i
            switch (order.getStatus()) {
                case PENDING_PAYMENT:
                    System.out.println("üí° ƒê∆°n h√†ng ƒëang ch·ªù thanh to√°n.");
                    break;
                case PROCESSING:
                    System.out.println("‚öôÔ∏è ƒê∆°n h√†ng ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω.");
                    break;
                case COMPLETED:
                    System.out.println("üéâ ƒê∆°n h√†ng ƒë√£ ho√†n th√†nh th√†nh c√¥ng!");
                    break;
                case FAILED:
                    System.out.println("‚ùå ƒê∆°n h√†ng ƒë√£ th·∫•t b·∫°i.");
                    break;
                case CANCELLED:
                    System.out.println("üö´ ƒê∆°n h√†ng ƒë√£ b·ªã h·ªßy.");
                    break;
                default:
                    System.out.println("‚ÑπÔ∏è Tr·∫°ng th√°i: " + order.getStatus());
            }

        } catch (Exception e) {
            System.err.println("‚ùå L·ªói khi ki·ªÉm tra tr·∫°ng th√°i: " + e.getMessage());
        }
    }

    private void showSupportedAssetsDemo() {
        System.out.println("\nüíé T√ÄI S·∫¢N ƒê∆Ø·ª¢C H·ªñ TR·ª¢");
        System.out.println("-".repeat(30));

        try {
            // Ch·ªçn provider
            String provider = selectProvider();
            if (provider == null) return;

            // T·∫°o service v√† l·∫•y danh s√°ch t√†i s·∫£n
            OnRampService service = serviceFactory.createServiceWithDefaultConfig(provider);
            
            System.out.println("\n‚è≥ ƒêang l·∫•y danh s√°ch t√†i s·∫£n...");
            
            CompletableFuture<List<Asset>> assetsFuture = service.getSupportedAssets();
            List<Asset> assets = assetsFuture.get();

            // Hi·ªÉn th·ªã k·∫øt qu·∫£
            System.out.println("\n‚úÖ DANH S√ÅCH T√ÄI S·∫¢N");
            System.out.println("-".repeat(50));
            System.out.printf("T·ªïng s·ªë t√†i s·∫£n: %d%n%n", assets.size());

            if (assets.isEmpty()) {
                System.out.println("‚ùå Kh√¥ng c√≥ t√†i s·∫£n n√†o ƒë∆∞·ª£c h·ªó tr·ª£.");
                return;
            }

            // Hi·ªÉn th·ªã 10 t√†i s·∫£n ƒë·∫ßu ti√™n
            int displayCount = Math.min(10, assets.size());
            for (int i = 0; i < displayCount; i++) {
                Asset asset = assets.get(i);
                System.out.printf("%d. %s (%s) - %s%n", 
                    i + 1, 
                    asset.getName() != null ? asset.getName() : "N/A",
                    asset.getSymbol() != null ? asset.getSymbol() : "N/A",
                    asset.getType() != null ? asset.getType() : "N/A"
                );
            }

            if (assets.size() > 10) {
                System.out.printf("... v√† %d t√†i s·∫£n kh√°c%n", assets.size() - 10);
            }

        } catch (Exception e) {
            System.err.println("‚ùå L·ªói khi l·∫•y danh s√°ch t√†i s·∫£n: " + e.getMessage());
        }
    }

    private void showPaymentMethodsDemo() {
        System.out.println("\nüí≥ PH∆Ø∆†NG TH·ª®C THANH TO√ÅN");
        System.out.println("-".repeat(35));

        try {
            // Ch·ªçn provider
            String provider = selectProvider();
            if (provider == null) return;

            System.out.print("Nh·∫≠p m√£ ti·ªÅn ph√°p ƒë·ªãnh (VD: USD): ");
            String fiatCurrency = scanner.nextLine().trim().toUpperCase();

            System.out.print("Nh·∫≠p m√£ ti·ªÅn ƒëi·ªán t·ª≠ (VD: BTC): ");
            String cryptoCurrency = scanner.nextLine().trim().toUpperCase();

            // T·∫°o service v√† l·∫•y ph∆∞∆°ng th·ª©c thanh to√°n
            OnRampService service = serviceFactory.createServiceWithDefaultConfig(provider);
            
            System.out.println("\n‚è≥ ƒêang l·∫•y ph∆∞∆°ng th·ª©c thanh to√°n...");
            
            CompletableFuture<List<PaymentMethod>> methodsFuture = service.getPaymentMethods(fiatCurrency, cryptoCurrency);
            List<PaymentMethod> methods = methodsFuture.get();

            // Hi·ªÉn th·ªã k·∫øt qu·∫£
            System.out.println("\n‚úÖ PH∆Ø∆†NG TH·ª®C THANH TO√ÅN");
            System.out.println("-".repeat(40));
            System.out.printf("C·∫∑p ti·ªÅn t·ªá: %s/%s%n", fiatCurrency, cryptoCurrency);
            System.out.printf("S·ªë ph∆∞∆°ng th·ª©c: %d%n%n", methods.size());

            if (methods.isEmpty()) {
                System.out.println("‚ùå Kh√¥ng c√≥ ph∆∞∆°ng th·ª©c thanh to√°n n√†o cho c·∫∑p ti·ªÅn t·ªá n√†y.");
                return;
            }

            for (int i = 0; i < methods.size(); i++) {
                PaymentMethod method = methods.get(i);
                System.out.printf("%d. %s%n", i + 1, method.getName() != null ? method.getName() : "N/A");
                
                if (method.getMinLimit() != null && method.getMaxLimit() != null) {
                    System.out.printf("   Gi·ªõi h·∫°n: %.2f - %.2f %s%n", 
                        method.getMinLimit(), method.getMaxLimit(), fiatCurrency);
                }
                
                if (method.getProcessingTime() != null) {
                    System.out.printf("   Th·ªùi gian x·ª≠ l√Ω: %s%n", method.getProcessingTime());
                }
                
                System.out.println();
            }

        } catch (Exception e) {
            System.err.println("‚ùå L·ªói khi l·∫•y ph∆∞∆°ng th·ª©c thanh to√°n: " + e.getMessage());
        }
    }

    private void testProviderConnectionDemo() {
        System.out.println("\nüîó TEST K·∫æT N·ªêI PROVIDER");
        System.out.println("-".repeat(35));

        try {
            // Ch·ªçn provider
            String provider = selectProvider();
            if (provider == null) return;

            // T·∫°o service v√† test k·∫øt n·ªëi
            OnRampService service = serviceFactory.createServiceWithDefaultConfig(provider);
            
            System.out.println("\n‚è≥ ƒêang test k·∫øt n·ªëi...");
            
            // Test validate configuration
            CompletableFuture<Boolean> configValidFuture = service.validateConfiguration();
            boolean configValid = configValidFuture.get();

            // Test service availability
            CompletableFuture<Boolean> availableFuture = service.isServiceAvailable();
            boolean available = availableFuture.get();

            // Hi·ªÉn th·ªã k·∫øt qu·∫£
            System.out.println("\nüìä K·∫æT QU·∫¢ TEST");
            System.out.println("-".repeat(25));
            System.out.printf("Provider: %s%n", provider.toUpperCase());
            System.out.printf("C·∫•u h√¨nh h·ª£p l·ªá: %s%n", configValid ? "‚úÖ C√≥" : "‚ùå Kh√¥ng");
            System.out.printf("Service kh·∫£ d·ª•ng: %s%n", available ? "‚úÖ C√≥" : "‚ùå Kh√¥ng");

            if (configValid && available) {
                System.out.println("\nüéâ Provider ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng!");
            } else {
                System.out.println("\n‚ö†Ô∏è Provider c√≥ v·∫•n ƒë·ªÅ. Ki·ªÉm tra c·∫•u h√¨nh v√† k·∫øt n·ªëi m·∫°ng.");
            }

        } catch (Exception e) {
            System.err.println("‚ùå L·ªói khi test k·∫øt n·ªëi: " + e.getMessage());
        }
    }

    private String selectProvider() {
        String[] providers = serviceFactory.getSupportedProviders();
        
        if (providers.length == 0) {
            System.out.println("‚ùå Kh√¥ng c√≥ provider n√†o ƒë∆∞·ª£c h·ªó tr·ª£.");
            return null;
        }

        if (providers.length == 1) {
            System.out.printf("üîß S·ª≠ d·ª•ng provider: %s%n", providers[0].toUpperCase());
            return providers[0];
        }

        System.out.println("\nüè¢ Ch·ªçn provider:");
        for (int i = 0; i < providers.length; i++) {
            System.out.printf("%d. %s%n", i + 1, providers[i].toUpperCase());
        }

        System.out.print("Nh·∫≠p s·ªë th·ª© t·ª±: ");
        try {
            int choice = Integer.parseInt(scanner.nextLine().trim());
            if (choice >= 1 && choice <= providers.length) {
                return providers[choice - 1];
            } else {
                System.out.println("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.");
                return null;
            }
        } catch (NumberFormatException e) {
            System.out.println("‚ùå Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá.");
            return null;
        }
    }
}

